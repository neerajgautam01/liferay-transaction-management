/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.liferay.sample.model.Address;
import com.liferay.sample.model.AddressModel;
import com.liferay.sample.model.AddressSoap;
import com.liferay.sample.service.persistence.AddressPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Address service. Represents a row in the &quot;SAMPLE_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.AddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressImpl}.
 * </p>
 *
 * @author NeerajGautam
 * @see AddressImpl
 * @see com.liferay.sample.model.Address
 * @see com.liferay.sample.model.AddressModel
 * @generated
 */
@JSON(strict = true)
public class AddressModelImpl extends BaseModelImpl<Address>
	implements AddressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address model instance should use the {@link com.liferay.sample.model.Address} interface instead.
	 */
	public static final String TABLE_NAME = "SAMPLE_Address";
	public static final Object[][] TABLE_COLUMNS = {
			{ "addressId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "address", Types.VARCHAR },
			{ "contactNo", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SAMPLE_Address (addressId LONG not null,employeeId LONG not null,address VARCHAR(75) null,contactNo INTEGER,primary key (addressId, employeeId))";
	public static final String TABLE_SQL_DROP = "drop table SAMPLE_Address";
	public static final String DATA_SOURCE = "testDBDS";
	public static final String SESSION_FACTORY = "testDBSessionFactory";
	public static final String TX_MANAGER = "testDBTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Address"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Address"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Address toModel(AddressSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Address model = new AddressImpl();

		model.setAddressId(soapModel.getAddressId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setAddress(soapModel.getAddress());
		model.setContactNo(soapModel.getContactNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Address> toModels(AddressSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Address> models = new ArrayList<Address>(soapModels.length);

		for (AddressSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Address"));

	public AddressModelImpl() {
	}

	public AddressPK getPrimaryKey() {
		return new AddressPK(_addressId, _employeeId);
	}

	public void setPrimaryKey(AddressPK primaryKey) {
		setAddressId(primaryKey.addressId);
		setEmployeeId(primaryKey.employeeId);
	}

	public Serializable getPrimaryKeyObj() {
		return new AddressPK(_addressId, _employeeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AddressPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return Address.class;
	}

	public String getModelClassName() {
		return Address.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("addressId", getAddressId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("address", getAddress());
		attributes.put("contactNo", getContactNo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long addressId = (Long)attributes.get("addressId");

		if (addressId != null) {
			setAddressId(addressId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		Integer contactNo = (Integer)attributes.get("contactNo");

		if (contactNo != null) {
			setContactNo(contactNo);
		}
	}

	@JSON
	public long getAddressId() {
		return _addressId;
	}

	public void setAddressId(long addressId) {
		_addressId = addressId;
	}

	@JSON
	public long getEmployeeId() {
		return _employeeId;
	}

	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	public int getContactNo() {
		return _contactNo;
	}

	public void setContactNo(int contactNo) {
		_contactNo = contactNo;
	}

	@Override
	public Address toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Address)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public Address toUnescapedModel() {
		return (Address)this;
	}

	@Override
	public Object clone() {
		AddressImpl addressImpl = new AddressImpl();

		addressImpl.setAddressId(getAddressId());
		addressImpl.setEmployeeId(getEmployeeId());
		addressImpl.setAddress(getAddress());
		addressImpl.setContactNo(getContactNo());

		addressImpl.resetOriginalValues();

		return addressImpl;
	}

	public int compareTo(Address address) {
		AddressPK primaryKey = address.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Address)) {
			return false;
		}

		Address address = (Address)obj;

		AddressPK primaryKey = address.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Address> toCacheModel() {
		AddressCacheModel addressCacheModel = new AddressCacheModel();

		addressCacheModel.addressId = getAddressId();

		addressCacheModel.employeeId = getEmployeeId();

		addressCacheModel.address = getAddress();

		String address = addressCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			addressCacheModel.address = null;
		}

		addressCacheModel.contactNo = getContactNo();

		return addressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{addressId=");
		sb.append(getAddressId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", contactNo=");
		sb.append(getContactNo());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Address");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addressId</column-name><column-value><![CDATA[");
		sb.append(getAddressId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactNo</column-name><column-value><![CDATA[");
		sb.append(getContactNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Address.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Address.class
		};
	private long _addressId;
	private long _employeeId;
	private String _address;
	private int _contactNo;
	private Address _escapedModel;
}